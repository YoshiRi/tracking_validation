"""try to parse csv generated by plotjugler

Returns:
    _type_: _description_
"""

from autoware_auto_perception_msgs.msg import DetectedObject
from autoware_auto_perception_msgs.msg import TrackedObject
from autoware_auto_perception_msgs.msg import DetectedObjectKinematics
from autoware_auto_perception_msgs.msg import ObjectClassification
from autoware_auto_perception_msgs.msg import Shape


# load csv data
import pandas as pd
csv_file = "/home/yoshiri/tracker_data.csv"
csv_data = pd.read_csv(csv_file)


detected_obj_names = [
    "/perception/object_recognition/detection/objects/objects.0/",
    "/perception/object_recognition/detection/objects/objects.1/",
    "/perception/object_recognition/detection/objects/objects.2/",
]


# get corresponding pose with covariance from csv data
def getDetectedObject(df, obj_name):
    obj = DetectedObject()

    try:
        # classification
        classification = ObjectClassification()
        classification.label = int(df[obj_name + "classification.0/label"])
        classification.probability = df[obj_name + "classification.0/probability"].astype(float)
        obj.classification = [classification]
        obj.existence_probability = df[obj_name + "existence_probability"].astype(float)
        obj.kinematics = DetectedObjectKinematics()
        obj.kinematics.pose_with_covariance.pose.position.x = df[obj_name + "kinematics/pose_with_covariance/pose/position/x"].astype(float)
        obj.kinematics.pose_with_covariance.pose.position.y = df[obj_name + "kinematics/pose_with_covariance/pose/position/y"].astype(float)
        obj.kinematics.pose_with_covariance.pose.position.z = df[obj_name + "kinematics/pose_with_covariance/pose/position/z"].astype(float)
        obj.kinematics.pose_with_covariance.pose.orientation.x = df[obj_name + "kinematics/pose_with_covariance/pose/orientation/x"].astype(float)
        obj.kinematics.pose_with_covariance.pose.orientation.y = df[obj_name + "kinematics/pose_with_covariance/pose/orientation/y"].astype(float)
        obj.kinematics.pose_with_covariance.pose.orientation.z = df[obj_name + "kinematics/pose_with_covariance/pose/orientation/z"].astype(float)
        obj.kinematics.pose_with_covariance.pose.orientation.w = df[obj_name + "kinematics/pose_with_covariance/pose/orientation/w"].astype(float)
        for i in range(36):
            obj.kinematics.pose_with_covariance.covariance[i] = df[obj_name + "kinematics/pose_with_covariance/covariance." + str(i)].astype(float)
        obj.kinematics.twist_with_covariance.twist.linear.x = df[obj_name + "kinematics/twist_with_covariance/twist/linear/x"].astype(float)
        obj.kinematics.twist_with_covariance.twist.linear.y = df[obj_name + "kinematics/twist_with_covariance/twist/linear/y"].astype(float)
        obj.kinematics.twist_with_covariance.twist.linear.z = df[obj_name + "kinematics/twist_with_covariance/twist/linear/z"].astype(float)
        obj.kinematics.twist_with_covariance.twist.angular.x = df[obj_name + "kinematics/twist_with_covariance/twist/angular/x"].astype(float)
        obj.kinematics.twist_with_covariance.twist.angular.y = df[obj_name + "kinematics/twist_with_covariance/twist/angular/y"].astype(float)
        obj.kinematics.twist_with_covariance.twist.angular.z = df[obj_name + "kinematics/twist_with_covariance/twist/angular/z"].astype(float)
        obj.shape = Shape()
        obj.shape.dimensions.x = df[obj_name + "shape/dimensions/x"].astype(float)
        obj.shape.dimensions.y = df[obj_name + "shape/dimensions/y"].astype(float)
        obj.shape.dimensions.z = df[obj_name + "shape/dimensions/z"].astype(float)
        obj.shape.type = df[obj_name + "shape/type"].astype(int)
    except Exception as e:
        return None
    
    return obj


# get corresponding pose with covariance from csv data
def getTrackedObject(df, obj_name):
    obj = TrackedObject()

    try:
        # classification
        classification = ObjectClassification()
        classification.label = int(df[obj_name + "classification.0/label"])
        classification.probability = df[obj_name + "classification.0/probability"].astype(float)
        obj.classification = [classification]
        obj.existence_probability = df[obj_name + "existence_probability"].astype(float)
        obj.kinematics.pose_with_covariance.pose.position.x = df[obj_name + "kinematics/pose_with_covariance/pose/position/x"].astype(float)
        obj.kinematics.pose_with_covariance.pose.position.y = df[obj_name + "kinematics/pose_with_covariance/pose/position/y"].astype(float)
        obj.kinematics.pose_with_covariance.pose.position.z = df[obj_name + "kinematics/pose_with_covariance/pose/position/z"].astype(float)
        obj.kinematics.pose_with_covariance.pose.orientation.x = df[obj_name + "kinematics/pose_with_covariance/pose/orientation/x"].astype(float)
        obj.kinematics.pose_with_covariance.pose.orientation.y = df[obj_name + "kinematics/pose_with_covariance/pose/orientation/y"].astype(float)
        obj.kinematics.pose_with_covariance.pose.orientation.z = df[obj_name + "kinematics/pose_with_covariance/pose/orientation/z"].astype(float)
        obj.kinematics.pose_with_covariance.pose.orientation.w = df[obj_name + "kinematics/pose_with_covariance/pose/orientation/w"].astype(float)
        for i in range(36):
            obj.kinematics.pose_with_covariance.covariance[i] = df[obj_name + "kinematics/pose_with_covariance/covariance." + str(i)].astype(float)
        for i in range(16):
            obj.object_id[i] = df[obj_name + "object_id/uuid." + str(i)].astype(int)
        obj.kinematics.twist_with_covariance.twist.linear.x = df[obj_name + "kinematics/twist_with_covariance/twist/linear/x"].astype(float)
        obj.kinematics.twist_with_covariance.twist.linear.y = df[obj_name + "kinematics/twist_with_covariance/twist/linear/y"].astype(float)
        obj.kinematics.twist_with_covariance.twist.linear.z = df[obj_name + "kinematics/twist_with_covariance/twist/linear/z"].astype(float)
        obj.kinematics.twist_with_covariance.twist.angular.x = df[obj_name + "kinematics/twist_with_covariance/twist/angular/x"].astype(float)
        obj.kinematics.twist_with_covariance.twist.angular.y = df[obj_name + "kinematics/twist_with_covariance/twist/angular/y"].astype(float)
        obj.kinematics.twist_with_covariance.twist.angular.z = df[obj_name + "kinematics/twist_with_covariance/twist/angular/z"].astype(float)
        obj.shape = Shape()
        obj.shape.dimensions.x = df[obj_name + "shape/dimensions/x"].astype(float)
        obj.shape.dimensions.y = df[obj_name + "shape/dimensions/y"].astype(float)
        obj.shape.dimensions.z = df[obj_name + "shape/dimensions/z"].astype(float)
        obj.shape.type = df[obj_name + "shape/type"].astype(int)
    except Exception as e:
        return None
    
    return obj

# get detected objects
test_detected_object = getDetectedObject(csv_data.iloc[0,:], detected_obj_names[0])
